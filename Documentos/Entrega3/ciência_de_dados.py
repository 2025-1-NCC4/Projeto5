# -*- coding: utf-8 -*-
"""Ciência de Dados

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fA9KLCsUYZP_UXcDidhLiqWzEshHnBJY

# Modelagem e Dashboard com Dados Econômicos do Banco Central
Este notebook realiza uma análise, modelagem e visualização de dados econômicos: commodities agropecuárias, taxa de câmbio e exportações.
"""

# Instalar bibliotecas necessárias
!pip install python-bcb

from bcb import sgs
from datetime import datetime
import pandas as pd
import scipy.stats as stats
import numpy as np
import plotly.express as px
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score

# Coleta de dados
series = {'Preço de Commodities Agropecuárias': 29041, 'Taxa de Cambio (Dólar)': 3698, 'Exportacoes': 22708}
dados = sgs.get(series, start='2015-01-01', end=datetime.today().strftime('%Y-%m-%d'))
dados = dados.reset_index().dropna()
dados.head()

# Estatísticas descritivas e Intervalos de Confiança
n = len(dados)
media_commodities = dados['Preço de Commodities Agropecuárias'].mean()
desvio_commodities = dados['Preço de Commodities Agropecuárias'].std()
media_cambio = dados['Taxa de Cambio (Dólar)'].mean()
desvio_cambio = dados['Taxa de Cambio (Dólar)'].std()
media_exportacoes = dados['Exportacoes'].mean()
desvio_exportacoes = dados['Exportacoes'].std()

ic_commodities = stats.t.interval(confidence=0.95, df=n-1, loc=media_commodities, scale=desvio_commodities/np.sqrt(n))
ic_cambio = stats.t.interval(confidence=0.95, df=n-1, loc=media_cambio, scale=desvio_cambio/np.sqrt(n))
ic_exportacoes = stats.t.interval(confidence=0.95, df=n-1, loc=media_exportacoes, scale=desvio_exportacoes/np.sqrt(n))

def format_ic(label, intervalo):
    print(f"{label}: entre {round(intervalo[0], 2)} e {round(intervalo[1], 2)}")

format_ic("IC do Preço Médio das Commodities Agropecuárias", ic_commodities)
format_ic("IC da Taxa de Câmbio Média (Dólar)", ic_cambio)
format_ic("IC da Média das Exportações", ic_exportacoes)

# Correlação
correlacoes = dados.corr(numeric_only=True)
print(correlacoes)
print(f"Correlação entre Commodities e Exportações: {correlacoes.loc['Preço de Commodities Agropecuárias', 'Exportacoes']:.2f}")
print(f"Correlação entre Câmbio e Exportações: {correlacoes.loc['Taxa de Cambio (Dólar)', 'Exportacoes']:.2f}")

# Regressão Linear
X = dados[['Preço de Commodities Agropecuárias', 'Taxa de Cambio (Dólar)']]
y = dados['Exportacoes']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

modelo = LinearRegression()
modelo.fit(X_train, y_train)
y_pred = modelo.predict(X_test)

print("R²:", r2_score(y_test, y_pred))
print("RMSE:", np.sqrt(mean_squared_error(y_test, y_pred)))
pd.DataFrame({'Variável': X.columns, 'Coeficiente': modelo.coef_})

# Dashboard - Série Temporal
dados_norm = dados.copy()
for col in ['Preço de Commodities Agropecuárias', 'Taxa de Cambio (Dólar)', 'Exportacoes']:
    dados_norm[col] = (dados[col] - dados[col].min()) / (dados[col].max() - dados[col].min())

# Plotando
fig = px.line(dados_norm, x='Date',
              y=['Preço de Commodities Agropecuárias', 'Taxa de Cambio (Dólar)', 'Exportacoes'],
              title='Evolução Normalizada dos Indicadores Econômicos')
fig.show()

#Objetivo: Mostrar a evolução no tempo dos três indicadores: commodities, câmbio e exportações.
   #Relevante porque são dados econômicos com tendência temporal clara.
   #Ajuda a identificar padrões sazonais, choques (ex: pandemia, crises), e tendência de crescimento ou queda.

# Dashboard - Matriz de Correlação
fig_corr = px.imshow(correlacoes, text_auto=True, title='Matriz de Correlação')
fig_corr.show()

# Objetivo: Avaliar relações lineares entre as variáveis.
   # Facilita entender como os indicadores se associam.
   # Ex: se commodities sobem, exportações também sobem? Correlação positiva?
   # Útil para justificar a escolha de variáveis no modelo preditivo.

# Dashboard - Predição vs Real
resultado = pd.DataFrame({'Real': y_test, 'Predito': y_pred})
fig_pred = px.scatter(resultado, x='Real', y='Predito', title='Exportações Reais vs. Preditas')
fig_pred.add_shape(type='line', x0=y.min(), y0=y.min(), x1=y.max(), y1=y.max(),
                   line=dict(color='red', dash='dash'))
fig_pred.show()

# Objetivo: Avaliar o desempenho do modelo de regressão.
#     Permite visualizar o quão próximo o modelo está da realidade.
#     A linha vermelha (ideal) mostra onde predito = real. Se os pontos estiverem próximos, o modelo está bom.
#     Muito usado para modelos de machine learning.